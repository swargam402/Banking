<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <tx:annotation-driven />
    <context:annotation-config />

    <context:component-scan base-package="com.cayman.repository.**"/>
    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
        <!--<jdbc:script location="classpath:db/create_db_hsqldb.sql"/>-->
        <jdbc:script location="classpath:db/create_db_postgres.sql"/>
        <jdbc:script encoding="utf-8" location="classpath:db/populate_db.sql"/>
    </jdbc:initialize-database>


    <!--<context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>-->
    <!--<context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>-->


    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value = "org.hsqldb.jdbcDriver"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value = "${database.username}"/>
        <property name="password" value = "${database.password}"/>
    </bean>-->

    <!--<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value = "org.postgresql.Driver"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value = "${database.username}"/>
        <property name="password" value = "${database.password}"/>
    </bean>-->
    <context:property-placeholder location="classpath:/db/heroku.properties" system-properties-mode="OVERRIDE"/>

    <bean class="java.net.URI" id="dbUrl">
        <constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>
    </bean>

    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value = "org.postgresql.Driver"/>
        <property name="url" value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() }"/>
        <property name="username" value = "#{ @dbUrl.getUserInfo().split(':')[0] }"/>
        <property name="password" value = "#{ @dbUrl.getUserInfo().split(':')[1] }"/>
        <property name="validationQuery" value = "SELECT 1 FROM users"/>
        <property name="minIdle" value = "2"/>
        <property name="maxIdle" value = "5"/>
        <property name="testOnBorrow" value = "true"/>
        <property name="removeAbandoned" value = "true"/>
        <property name="testOnConnect" value = "true"/>
        <property name="testWhileIdle" value = "true"/>
    </bean>


    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="com.cayman.entity.**">
        <!--p:persistenceUnitName="persistenceUnit">-->

        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}" value="${hibernate.use_sql_comments}"/>
             <!--   <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}" value="org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}" value="false"/>
               <!-- <entry key="#{T(org.hibernate.cfg.AvailableSettings).DIALECT}" value="org.hibernate.dialect.HSQLDialect"/>-->
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).DIALECT}" value="org.hibernate.dialect.PostgreSQL82Dialect"/>
                <entry key="#{T(org.hibernate.cache.ehcache.AbstractEhcacheRegionFactory).NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME}" value="cache/ehcache.xml"/>

            </map>
        </property>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:showSql="${jpa.showSql}">
            </bean>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
</beans>